I"<!--
 * @Descripttion:webpack插件的基本原理
 * @Author: xietianfeng
 * @Date: 2022-01-05 10:13:42
 * @LastEditors: xietianfeng
 * @LastEditTime: 2022-01-05 10:33:53
-->

<hr />

<p>layout: post
title: webpack 插件的基本原理
category: blog
description: webpack 插件的基本原理</p>

<hr />

<h2 id="webpack-插件的基本原理">webpack 插件的基本原理</h2>

<h3 id="基本用法">基本用法</h3>

<pre><code class="language-javascript">const HtmlWebpackPlugin = require("html-webpack-plugin");
</code></pre>

<pre><code class="language-javascript">module.exports = {
  plugins: [
    new HtmlWebpackPlugin({
      template: "./public/index.html", // 模版文件
    }),
  ],
};
</code></pre>

<blockquote>
  <p>如上是一个 webpack 插件的基本用法，那么他的原理是什么呢</p>
</blockquote>

<h3 id="基本原理">基本原理</h3>

<h4 id="1-调用-webpack-函数接收-config-配置信息实例化-compiler初始化内置插件调用所有内置插件的apply">1. 调用 webpack 函数，接收 config 配置信息，实例化 compiler，初始化内置插件（调用所有内置插件的.apply）</h4>

<h4 id="2-调用-compilerrun-进入编译阶段">2. 调用 compiler.run 进入编译阶段</h4>

<ul>
  <li>1.每一次新的编译都会实例化一个 compilation 对象，记录本次编译的基本信息</li>
  <li>2.进入 make 阶段，即触发 compilation.hooks.make 钩子，从 entry 为入口
    <ul>
      <li>1.执行对应的 loader 对模块进行预处理转为标准的 js 模块</li>
      <li>2.调用三方插件 acorn 对标准 JS 模块进行分析，递归每个依赖项，生成语法树</li>
    </ul>
  </li>
  <li>3.最后调用 compilation.seal render 模块，整合各个依赖项，最后输出一个或多个 chunk</li>
</ul>

<h3 id="webpack-插件规范">webpack 插件规范</h3>

<ul>
  <li>一个 JavaScript 命名函数或 JavaScript 类。</li>
  <li>在插件函数的 prototype 上定义一个 apply 方法。</li>
  <li>指定一个绑定到 webpack 自身的事件钩子。</li>
  <li>处理 webpack 内部实例的特定数据。</li>
  <li>功能完成后调用 webpack 提供的回调。</li>
</ul>

<blockquote>
  <p>基本插件架构及使用方法 ↓</p>
</blockquote>

<pre><code class="language-javascript">class HelloWorldPlugin {
  apply(compiler) {
    compiler.hooks.done.tap(
      "Hello World Plugin",
      (stats /* 绑定 done 钩子后，stats 会作为参数传入。 */) =&gt; {
        console.log("Hello World!");
      }
    );
  }
}

module.exports = HelloWorldPlugin;
</code></pre>

<pre><code class="language-javascript">// webpack.config.js
var HelloWorldPlugin = require("hello-world");

module.exports = {
  // ... 这里是其他配置 ...
  plugins: [new HelloWorldPlugin({ options: true })],
};
</code></pre>
:ET